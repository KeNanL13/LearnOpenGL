#include "myopenglwidget.h"



MyOpenGLWidget::MyOpenGLWidget(QWidget *parent) :
    QOpenGLWidget (parent),
    camera(this)
{
    QSurfaceFormat format;
    format.setSamples(4);
    this->setFormat(format);
    QTimer *timer=new QTimer;
    timer->setInterval(18);
    connect(timer,&QTimer::timeout,[=](){
        makeCurrent();
        update();
        doneCurrent();
    });
    timer->start();


    camera.init();



}

MyOpenGLWidget::~MyOpenGLWidget()
{
    delete m_timer;
    delete shaderProgram;

}



void MyOpenGLWidget::setShape()
{

    m_Shape=Rect;
    update();
}



void MyOpenGLWidget::setWireFrame(bool isWireFrame)
{
    makeCurrent();
    if(isWireFrame)
    {

        glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
    }
    else {
        glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
    }
    update();
    doneCurrent();
}

void MyOpenGLWidget::Clear()
{
    m_Shape=None;
    makeCurrent();
    update();
    doneCurrent();
}

void MyOpenGLWidget::loadModel()
{

    m_Shape=ModelLoading;
}

void MyOpenGLWidget::TimerStart()
{
    if(m_timer)
    {
        m_timer->start();
    }
}

void MyOpenGLWidget::TimerEnd()
{
    if(m_timer)
    {
        m_timer->stop();
    }
}


void MyOpenGLWidget::initializeGL()
{
    initializeOpenGLFunctions();
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_MULTISAMPLE);
//    glEnable(GL_CULL_FACE);
    QVector3D albedo(0.5,0.0,0.0);
    float ao=1.0f;
    lightPositions[0]=QVector3D(-10.0f,10.0f,10.0f);
    lightPositions[1]=QVector3D(10.0f,10.0f,10.0f);
    lightPositions[2]=QVector3D(-10.0f,-10.0f,10.0f);
    lightPositions[3]=QVector3D(10.0f,-10.0f,10.0f);

    lightColors[0]=QVector3D(300.0f,300.0f,300.0f);
    lightColors[1]=QVector3D(300.0f,300.0f,300.0f);
    lightColors[2]=QVector3D(300.0f,300.0f,300.0f);
    lightColors[3]=QVector3D(300.0f,300.0f,300.0f);


    shaderProgram=new QOpenGLShaderProgram();
    shaderProgram->addShaderFromSourceFile(QOpenGLShader::Vertex,":/pbr.vert");
    shaderProgram->addShaderFromSourceFile(QOpenGLShader::Fragment,":/pbr.frag");
    shaderProgram->link();

    shaderProgram->bind();
    shaderProgram->setUniformValue("albedo",albedo);
    shaderProgram->setUniformValue("ao",ao);

    model.setToIdentity();
    projection.perspective(fov,this->width()/this->height(),0.1f,100.0f);
    shaderProgram->setUniformValue("projection",projection);

    //test
    model.translate(lightPositions[0]);
    model.scale(0.5);


}

void MyOpenGLWidget::resizeGL(int w, int h)
{
    glViewport(0,0,w,h);
}

void MyOpenGLWidget::paintGL()
{

    glClearColor(0.4f,0.5f,0.4f,0);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);


    switch (m_Shape) {
    case Rect:
        shaderProgram->bind();
        shaderProgram->setUniformValue("view",camera.getView());

        model.setToIdentity();
        shaderProgram->setUniformValue("camPos",camera.getCameraPos());
        //render sphere
        for(int row=0;row<nrRows;row++)
        {
            shaderProgram->setUniformValue("metallic",(float)row/(float)nrRows);
//            shaderProgram->setUniformValue("metallic",1.0f);
            for(int col=0;col<nrColumns;++col)
            {
                shaderProgram->setUniformValue("roughness",Clamp((float)col/(float)nrColumns,0.05,1.0));

                model.setToIdentity();
                model.translate(QVector3D((col-(nrColumns/2)) * spacing,
                                          (row-(nrRows/2))* spacing,
                                          0.0f
                                          ));

                shaderProgram->setUniformValue("model",model);
                shaderProgram->setUniformValue("normalMatrix",model.normalMatrix());
                RenderSphere();
            }
        }

        //render light
        for(unsigned int i=0; i< sizeof (lightPositions)/sizeof (lightPositions[0]);i++)
        {
            QVector3D newPos=lightPositions[i]+QVector3D(sin(QTime::currentTime().msec()*5.0)*5.0,0.0,0.0);
            newPos=lightPositions[i];// fixeds
            shaderProgram->setUniformValue(QString("lightPosition[%1]").arg(i).toStdString().c_str(),newPos);
            shaderProgram->setUniformValue(QString("lightColors[%1]").arg(i).toStdString().c_str(),lightColors[i]);

            model.setToIdentity();
            model.translate(newPos);
            model.scale(0.5);
            shaderProgram->setUniformValue("model",model);
            shaderProgram->setUniformValue("normalMatrix",model.normalMatrix());
            RenderSphere();
        }
        break;
    case ModelLoading:


        break;
    default:
        break;
    }

}

bool MyOpenGLWidget::event(QEvent *e)
{
    camera.handle(e);
    return QWidget::event(e);
}

void MyOpenGLWidget::keyPressEvent(QKeyEvent *event)
{
    switch (event->key()) {
    case Qt::Key_Up:
        model.scale(1.1f);
        break;
    case Qt::Key_Down:
        model.scale(0.9f);
        break;
    default:
        break;
    }
    makeCurrent();
    update();
    doneCurrent();
}

void MyOpenGLWidget::RenderSphere()
{
    if(sphereVAO == 0)
    {
        glGenVertexArrays(1,&sphereVAO);

        unsigned int vbo,ebo;
        glGenBuffers(1,&vbo);
        glGenBuffers(1,&ebo);

        QVector<QVector3D> positons;
        QVector<QVector2D> uv;
        QVector<QVector3D> normals;
        QVector<unsigned int> indices;

        const unsigned int X_SEGMENTS=64;
        const unsigned int Y_SEGMENTS=64;
        const float PI=3.14159265359f;

        //根据球坐标先取到球面顶点
//        for(unsigned int x=0;x<=X_SEGMENTS;x++)
//        {
//            for(unsigned int y=0;y<=Y_SEGMENTS;y++)
//            {
//                float xSegment=(float)x /(float)X_SEGMENTS;
//                float ySegment=(float)y /(float)Y_SEGMENTS;
//                float xPos=cosf(xSegment * 2.0f * PI) * sinf(ySegment * PI);
//                float yPos=cosf(ySegment * PI);
//                float zPos=sinf(xSegment * 2.0f * PI) * sinf(ySegment * PI);

//                positons.push_back(QVector3D(xPos,yPos,zPos));
//                uv.push_back(QVector2D(xSegment,ySegment));
//                normals.push_back(QVector3D(xPos,yPos,zPos));
//            }
//        }

        for(unsigned int y=0;y<=Y_SEGMENTS;y++)
        {
            for(unsigned int x=0;x<=X_SEGMENTS;x++)
            {
                float xSegment=(float)x /(float)X_SEGMENTS;
                float ySegment=(float)y /(float)Y_SEGMENTS;
                float xPos=cosf(xSegment * 2.0f * PI) * sinf(ySegment * PI);
                float yPos=cosf(ySegment * PI);
                float zPos=sinf(xSegment * 2.0f * PI) * sinf(ySegment * PI);

                positons.push_back(QVector3D(xPos,yPos,zPos));
                uv.push_back(QVector2D(xSegment,ySegment));
                normals.push_back(QVector3D(xPos,yPos,zPos));
            }
        }

        bool oddRow=false;
        for(unsigned int y=0;y<Y_SEGMENTS;y++)
        {
            if(!oddRow)
            {
                for(unsigned int x=0;x<=X_SEGMENTS;++x)
                {
                    indices.push_back(y * (X_SEGMENTS+1)+x);
                    indices.push_back((y+1) * (X_SEGMENTS+1)+x);

                }
            }
            else{
                for(int x=X_SEGMENTS;x>=0;--x)
                {
                    indices.push_back((y+1) * (X_SEGMENTS+1)+x);
                    indices.push_back(y * (X_SEGMENTS+1) + x);
                }
            }
            oddRow=!oddRow;
        }
        indexCount=static_cast<unsigned int>(indices.size());

        std::vector<float> data;
        for(unsigned int i=0;i < positons.size();++i)
        {
            data.push_back(positons[i].x());
            data.push_back(positons[i].y());
            data.push_back(positons[i].z());
            if(normals.size()>0)
            {
                data.push_back(normals[i].x());
                data.push_back(normals[i].y());
                data.push_back(normals[i].z());

            }
            if(uv.size()>0)
            {
                data.push_back(uv[i].x());
                data.push_back(uv[i].y());
            }
        }
        glBindVertexArray(sphereVAO);
        glBindBuffer(GL_ARRAY_BUFFER,vbo);
        glBufferData(GL_ARRAY_BUFFER,data.size() * sizeof(float), &data[0],GL_STATIC_DRAW);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ebo);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER,indices.size() * sizeof (unsigned int),&indices[0],GL_STATIC_DRAW);

        unsigned int stride = (3+2+3) * sizeof (float);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,stride,nullptr);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,stride,(void*)(sizeof(float)*3));
        glEnableVertexAttribArray(2);
        glVertexAttribPointer(2,2,GL_FLOAT,GL_FALSE,stride,(void*)(sizeof (float)*6));

        count=0;
        m_timer=new QTimer;
        m_timer->setInterval(18);
        connect(m_timer,&QTimer::timeout,[=](){
            if(count<=indexCount)
            {
                count++;
            }
        });
    }
    glBindVertexArray(sphereVAO);
    glDrawElements(GL_TRIANGLE_STRIP,indexCount,GL_UNSIGNED_INT,0);
//    glDrawElements(GL_TRIANGLE_STRIP,count,GL_UNSIGNED_INT,0);//启用绘制计时器
}

float MyOpenGLWidget::Clamp(float x, float min, float max)
{

    if(x<min)
    {
        return min;
    }else if(x>max)
    {
        return  max;
    }else{
        return  x;
    }
}

void MyOpenGLWidget::wheelEvent(QWheelEvent *event)
{
    if(fov>=1.0f&&fov<=90.0f)
    {
        fov-=event->delta()*0.08f;
    }
    if(fov<=1)
    {
        fov=1.0f;

    }
   if(fov>=90)
    {
        fov=90.0f;
    }
   projection.setToIdentity();
   projection.perspective(fov,width()/height(),0.1f,1000);
    makeCurrent();
    update();
    doneCurrent();
}
